on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

name: CI/CD

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          envkey_DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          envkey_DATABASE_USER: ${{ secrets.DATABASE_USER }}
          envkey_DATABASE_PASS: ${{ secrets.DATABASE_PASS }}
          envkey_DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          envkey_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          envkey_SMTP_HOST: ${{ secrets.SMTP_HOST }}
          envkey_SMTP_PORT: ${{ secrets.SMTP_PORT }}
          envkey_SMTP_USER: ${{ secrets.SMTP_USER }}
          envkey_SMTP_PASS: ${{ secrets.SMTP_PASS }}
          envkey_BASE_URL: ${{ secrets.BASE_URL }}
          envkey_GOOGLE_MAP_API_KEY: ${{ secrets.GOOGLE_MAP_API_KEY }}
          envkey_STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
          envkey_STRIPE_SECRET_API_KEY: ${{ secrets.STRIPE_SECRET_API_KEY }}
          envkey_STRIPE_SIGNING_SECRET: ${{ secrets.STRIPE_SIGNING_SECRET }}
          envkey_SERVER_KEY: ${{ secrets.SERVER_KEY }}
          directory: './'
          file_name: .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-guardian-api
          #        IMAGE_TAG: latest
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Executing remote ssh commands and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker login -u AWS -p $(aws ecr get-login-password) ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.build-image.outputs.image }}
            cd ~/my-guardian-api
            docker-compose down
            MY_GUARDIAN_IMAGE=${{ steps.build-image.outputs.image }} docker-compose up -d
